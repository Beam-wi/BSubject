2. 引用
	
	2.1）引用的基本使用
		作用：给变量起别名
		语法：数据类型 &别名 = 原名					//& 既是 取址符 也是 引用符

			#include<iostream>
			using namespace std;		
			
			
			
			int main(){	

				int a = 10;
				int &b = a;
				
				cout << a << endl;		// 输出：10
				cout << b << endl;		// 输出：10
				
				b = 100;
				
				cout << a << endl;		// 输出：100
				cout << b << endl;		// 输出：100			
				
				system("pause");
				
				return 0;
			}

	2.2）引用的注意事项
		引用必须初始化					（既必须等于一个具体对象）
		引用在初始化后，不可以改变		（不能更改引用其他的变量了，只能更改值）

	
	2.3）引用做函数参数
		作用：函数传参时，可以利用引用的技术让形参修饰实参					（值传递时形参不能修饰实参，地址传递能，这里也能）
		优点：可以简化指针修改实参
		
			#include<iostream>
			using namespace std;		
			
			
			//1.值传递
			void mySwap01(int a, int b)
			{
				int temp = a;
				a = b;
				b = temp;
			}

			//2.地址传递
			void mySwap02(int *a, int *b)				//接受地址写法
			{
				int temp = *a;
				*a = *b;
				*b = temp;
			}

			//3.引用传递
			void mySwap03(int &a, int &b)
			{
				int temp = a;
				a = b;
				b = temp;
			}

			
			
			int main(){	

				int a = 10;
				int b = 20;
				
				mySwap01(a, b);			
				
				cout << a << endl;		// 输出：10
				cout << b << endl;		// 输出：20
				
				
				int a = 10;
				int b = 20;
				
				mySwap02(&a, &b);		//传入地址写法
				
				cout << a << endl;		// 输出：20
				cout << b << endl;		// 输出：10


				int a = 10;
				int b = 20;
				
				mySwap03(a, b);			//应用传递，形参会修饰实参的
				
				cout << a << endl;		// 输出：20
				cout << b << endl;		// 输出：10				
		
				
				system("pause");
				
				return 0;
			}		


	2.4）引用做函数返回值
		作用：引用是可以作为函数的返回值存在的
		
		注意：不要返回局部变量引用
		用法：函数调用作为左值
		
		
			int& test01()
			{
				int a = 10;		//局部变量存放在四区中的 栈区
				return a;
			}
		
			int& test02()
			{
				static int a = 10;		//静态变量存放在 全局区，全局区的数据在程序结束后系统释放
				return a;
			}			
		
			int main(){	
				
				//1.引用做函数的返回值
				int &ref = test01();		
				
				cout << ref << endl;		// 输出：10		第一次结果正确是因为编译器做了保留
				cout << ref << endl;		// 输出：乱码	第二次结果错误是因为a的内存已经释放
				
				
				//2.函数的调用可以作为左值
				
				int &ref2 = test02();
				int b = 20;
				
				cout << ref2 << endl;		// 输出：10		
				cout << ref2 << endl;		// 输出：10		内存未释放

				test02() = 1000;			//如果函数的返回值是引用，这个函数调用可以作为左值（等式左边的值）
				
				cout << ref2 << endl;		// 输出：1000		
				cout << ref2 << endl;		// 输出：1000		
		
				
				system("pause");
				
				return 0;
			}			
		
	2.5） 引用的本质
		本质：引用的本质在C++ 内部实现是一个指针常量

			//发现是引用，转换为 int* const ref = &a;			引用的本质就是一个指针常量
			void func(int& ref){
				ref = 100;		//ref是引用，转换为*ref = 100	引用一旦初始化后，就不可以发生改变
			}
		
			int main(){	
				
				int a = 10;
				
				int& ref = a;				//自动转换为 int* const ref = &a; 指针常量指针指向不可改变，也说明为什么引用不可更改
				ref = 20;					//内部发现ref是引用，自动帮我们转换为：*ref = 20;
				
				cout << a << endl;			// 		
				cout << ref << endl;		// 		
		
				
				system("pause");
				
				return 0;
			}	

		总结：C++ 推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了。

	2.6) 常量引用
		作用：常量引用主要用来修饰形参，防止误操作
		
		在函数形参列表中，可以加const修饰形参，防止形参改变实参
		
			void showValue(const int &val)
			{
				val = 1000;							//错误语法，加const后不能再修改
				cout << "val = " << val << endl;
			}
		
			int main(){	
				
				int a = 10;
				int & ref = 10;						//非法语法，引用必须引一块合法的内存空间
				const int & ref = 10;				//正常语法，加上const 之后 编译器将代码修改 int temp = 10; const int & ref = temp;
				ref = 20;							//非法语法，加const之后变为只读，不可以修改
				
				int b = 100;
				showValue(b);						//源对象传入，引用接受，加const形参无法修改，保证实参不被修改。
				
				system("pause");
				
				return 0;
			}		

