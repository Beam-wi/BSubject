1. 模板

	1.2.2) 函数模板注意事项
		注意事项：
		
			自动类型推导，必须推导出一致的数据类型T，采可以使用。
			
			模板必须要确定出T的数据类型，才可以使用。
		
			语法：
				template<typename T>		//typename可以换成class

			案例：
				#include<iostream>
				using namespace std;
				include <string>
				
				//1. 自动类型推导，必须推导出一致的数据类型T，采可以使用。
				void test01()
				{
					
				}

				//2. 模板必须要确定出T的数据类型，才可以使用。
				template<class T>
				void func()
				{
					cout << "func 调用" << endl;
				}
				
				
				void test02()
				{
					func<int>();			//由于没有参数无法自动推导数据类型所以必须（随机）指定一个数据类型
				}



				int main(){	
					test01();
					test02();
					
					system("pause");
					
					return 0;
				}		


		总结：使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型。



	1.2.3) 函数模板案例
		案例描述：
		
			1. 利用函数模板封装一个排序的函数，可以对不同数据类型数据进行排序。
			2. 排序规则从大到小，排序算法为选择排序。
			3. 分别利用char数组和int数组进行测试。


			案例：
				#include<iostream>
				using namespace std;
				include <string>
				
				//排序函数
				template<class T>
				void mySort(T arr[], int len)
				{
					for (int i = 0; i < len; i++)
					{
						int max = i;
						for (int j = i+1; j < len; j++)
						{
							if (arr[max] < arr[j]
							{
								max = j;		//更新最大值下标
							}
						}
						if (max != i)
						{
							交换max和i元素
							mySwap(arr[max], arr[i]);
						}
					}
				}
				
				
				//打印数组函数
				template<class T>
				void printArray(T arr[], int len)
				{
					for (int i = 0; i < len; i++)
					{
						cout << arr[i] << " ";
					}
					cout << endl;
				}
				
				
				//测试char数组
				void test01()
				{
					char charArr[] = "badcfe";
					int num = sizeof(charArr)/sizeof(char)
				}

				//测试int数组
				void test02()
				{
					int intArr[] = {4, 5, 2, 3, 1, 0, 8, 7, 9, 6};
					int num = sizeof(intArr)/sizeof(int);
					mySort(intArr, num);
					printArray(intArr, num);
				}



				int main(){	
					test01();
					test02();
					
					system("pause");
					
					return 0;
				}		
 

		总结：-



	1.2.4) 普通函数和函数模板的区别
		普通函数与函数模板的区别：
		
			1. 普通函数调用时可以发生自动类型转换(隐式类型转换)
			2. 函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换
			3. 如果利用显示指定类型的方式，可以发生隐式类型转换


			案例：
				#include<iostream>
				using namespace std;
				include <string>
				
				//普通函数
				int myAdd01(int a, int b)
				{
					return a+b
				}
				
				
				//函数模板
				template<class T>
				T myAdd02(T a, T b)
				{
					return a+b
				}
				
				
				//测试
				void test01()
				{
					int a = 10;
					int b = 20;
					char c = 'c';
					//调用普通函数
					cout << myAdd01(a, b) << endl;				//输出：30
					cout << myAdd01(a, c) << endl;				//输出：109		普通函数自动将char类型字符串'c'转化为assci码99 int型相加
					//调用函数模板
					cout << myAdd02(a, c) << endl;				//报错	函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换
					cout << myAdd02<int>(a, c) << endl;			//输出：109		如果利用显示指定类型的方式，可以发生隐式类型转换
				}


				int main(){	
					test01();
					
					system("pause");
					
					return 0;
				}		
 

			总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T



	1.2.5) 普通函数和函数模板的调用规则
		调用规则如下：
		
			1. 如果函数模板和普通函数都可实现，优先调用普通函数
			2. 可以通过空模板参数列表来强制调用函数模板
			3. 函数模板也可以发生重载
			4. 如果函数模板可以产生更好的匹配优先调用函数模板


			案例：
				#include<iostream>
				using namespace std;
				include <string>
				
				//普通函数
				int myPrint(int a, int b)
				{
					cout << "调用普通函数" << endl;
				}
				
				
				//函数模板
				template<class T>
				T myPrint(T a, T b)
				{
					cout << "调用函数模板" << endl;
				}
				
				//函数模板重载
				template<class T>
				T myPrint(T a, T b, T c)
				{
					cout << "调用重载函数模板" << endl;
				}
				
				
				
				
				//测试
				void test01()
				{
					int a = 10;
					int b = 20;
					int c = 30;
					myPrint(a, b);				//调用普通函数
					myPrint<>(a, b);			//调用函数模板		通过空模板参数调用函数模板
					myPrint<>(a, b, c);			//调用函数模板重载	函数模板也可以发生函数重载
					
					char c1 = 'a';
					char c2 = 'b';
					myPrint<>(c1, c2);			//调用函数模板		如果函数模板可以产生更好的匹配优先调用函数模板
				}


				int main(){	
					test01();
					
					system("pause");
					
					return 0;
				}		
 

			总结：既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性。
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			




