3. 函数提高
	3.1) 函数默认参数
		在C++ 中，函数的形参列中的形参是可以有默认值的。
		
		语法：返回值类型 函数名 (参数=默认值){}
		
			void func(int a, int b = 10, int c = 30)
			{
				return a + b + c;
			}			


		注意：
			1. 如果函数声明有默认参数，函数实现就不能有默认参数，声明和实现只能由一个默认参数
			
			int func2(int a = 10, int b = 10);
			
			int func2(int a, int b)
			{
				return a + b;
			}

	3.2) 函数占位参数
		C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补改位置。
		
		语法：返回值类型 函数名(数据类型){}
		
			#include<iostream>
			using namespace std;
		
			//void func(int a, int)					//第二个位置就是占位参数，这里先不告诉怎么用，只知道有这么个语法就行
			void func(int a, int = 10)					//占位参数可以有默认参数
			{
				cout << "待续..." << endl;
			}
		
			int main(){	
				
				system("pause");
				
				return 0;
			}	

	3.3.1) 函数重载概述
		作用：函数名可以相同，提高复用性
		
		函数重载满足条件：
			1. 同一个作用域下
			2. 函数名称相同
			3. 函数参数类型不同 或者 个数不同 或者 顺序不同
			
		注意：函数的返回值不可以作为函数重载的条件---既函数函数重载调用时只认 函数名 不管 返回值类型，两个不同类型定义时，编译器会找不到具体调用哪个 出错。

			#include<iostream>
			using namespace std;
		

			void func()					//占位参数可以有默认参数
			{
				cout << "func 调用1" << endl;
			}
			
			void func(int a)					//占位参数可以有默认参数
			{
				cout << "func 调用2" << endl;
			}

			void func(double a)					//占位参数可以有默认参数
			{
				cout << "func 调用3" << endl;
			}

			void func(int a, double b)					//占位参数可以有默认参数
			{
				cout << "func 调用4" << endl;
			}

			void func(double a, int b)					//占位参数可以有默认参数
			{
				cout << "func 调用5" << endl;
			}
			
		
			int main(){	
				
				system("pause");
				
				return 0;
			}	

	3.3.2) 函数重载注意事项
		1. 引用作为重载条件
		2. 函数重载碰到函数默认参数

			#include<iostream>
			using namespace std;
		

			//引用作为重载条件
			void func(int &a)					
			{
				cout << "func 调用1" << endl;
			}
			
			void func(const int &a)					
			{
				cout << "func 调用2" << endl;
			}

			//函数重载碰到函数默认参数
			void func2(int a)					
			{
				cout << "func 调用3" << endl;
			}

			void func2(int a, int b)					
			{
				cout << "func 调用4" << endl;
			}

		
			int main(){	
				
				int a = 10;
				func(a);				//调用1
				
				func(10);				//调用2
				
				
				func2(10, 10);			//调用3
				
				func2(10);				//错误，当函数重载碰到默认参数，出现二义性，报错，尽量避免这种情况。
				
				system("pause");
				
				return 0;
			}	
