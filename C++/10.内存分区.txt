十、C++核心编程
	本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。
	
	1）、 内存分区模型
		C++程序在执行时，将内存大方向划分为4个区域
		1. 代码区		存放函数体的二进制代码，由操作系统进行管理的
		2. 全局区		存放全局变量和静态变量以及常量
		3. 栈区			由编译器自动分配释放，存放函数的参数值，局部变量等
		4. 堆区			由程序员分配和释放 若程序员部释放，程序结束时由操作系统回收
		
		内存四区意义：
			不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程
			
	1.1）、程序运行前
		在程序编译后，生成了 exe 可执行编程，未执行该程序前分为两个区域
		代码区：
			存放CPU执行的机器指令
			代码区时共享的，共享的目的是对于频繁执行的程序，只需要在内存中由一份代码即可
			代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令
			
		全局区：
			全局变量和静态变量存放在此
			全局区还包含了常量区，字符串常量 和 其他常量(const修饰的常量) 也存放在此
			该区域的数据在程序结束后由操作系统释放
			总结：
				在全局区：		全局变量：函数外  int g_a = 10;
								静态变量：函数内  static int s_a = 10;
								常量-字符串常量：函数内  "字符串常量"
								常量-const修饰的全局变量（全局常量）：函数外  const int c_g_a = 10;
				
				不在全局区：	局部变量：函数内  int g_a = 10;
								const修饰的局部变量（局部常量）：函数内  const int c_g_a = 10;
		
	1.2）、程序运行后
		栈区：
			由编译器自动分配释放，存放函数的参数值（形参），局部变量等。
			注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。
			

			#include<iostream>
			using namespace std;		
			
			
			void func()
			{
				int a = 10;					//局部变量 存放在栈区，栈区的数据再函数执行完后自动释放
				return &a;					//返回局部变量的地址
			}
			
			
			int main(){	

				int * p = func();
				
				cout << *p << endl;			//输出：10				正确	第一次可以打印正确的数字，是因为编译器做了保留
				cout << *p << endl;			//输出：267955168		乱码	第二次这个数据就不再保留了
				
				system("pause");
				
				return 0;
			}		



		堆区：
			由程序员分配释放，若程序员不释放，程序结束时由操作系统回收。
			在C++中主要利用new在堆区开辟内存
			
			
			#include<iostream>
			using namespace std;		
			
			
			int * func()
			{
				//利用new关键字 可以将数据开辟到堆区
				//指针 本质也是局部变量，放在栈上，指针保存的数据是放在栈区
				int * p = new int(10);					
				return p;					
			}
			
			
			int main(){	

				int * p = func();
				
				cout << *p << endl;			//输出：10				正确	p保存的是堆区变量的内存地址，*p 解引用就是内存地面的内容。
				cout << *p << endl;			//输出：10				正确	
				
				system("pause");
				
				return 0;
			}		
			

	1.3）new操作符
		C++中利用new操作符在堆区开辟数据
		堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete
		语法：new 数据类型
		利用new创建的数据，会返回该数据对应的类型的指针



			#include<iostream>
			using namespace std;		
			
			
			int * func()
			{
				//在堆区创建整型数据
				//new返回是 该数据类型的指针
				int * p = new int(10);		//10代表内存地址		
				return p;					
			}
			
			void test01()
			{
				int * p = func();
				cout << *p << endl;
				cout << *p << endl;
				cout << *p << endl;
				//堆区的数据 由程序员管理开辟，程序员管理释放
				//如果想释放堆区的数据，利用关键字 delete
				delete p;
				
				cout << *p << endl;		//内存已经释放，再次访问就是非法操作，会报错
			}
			
			
			//2. 在堆区利用new开辟数组
			void test02()
			{
				//创建10整型数据的数组，在堆区
				int * arr = new int[10];	//10代表数组有10个元素
				
				for (int i = 0; i < 10; i++)
				{
					arr[i] = i + 100;	//给10个元素赋值 100 ~ 109
				}
				
				for (int i = 0; i < 10; i++)
				{
					cout << arr[i] << endl;	
				}
				
				//释放数据要加 []才可以
				delete[] arr;
				
			}
			
			
			int main(){	

				rest01();
				
				system("pause");
				
				return 0;
			}	

