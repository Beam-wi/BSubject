五、数组
	概述：所谓数组，就是一个集合，里面存放了相同类型的数据元素
	
	特点1：数组中的每个数据元素都是相同的数据类型
	特点2：数组是由连续的内存位置组成的
	
	1）、一维数组
		1. 定义方式
			三种定义方式
			a. 数据类型 数组名[ 数组长度 ];
			b. 数据类型 数组名[ 数组长度 ] = {值1, 值2, ...};
			c. 数据类型 数组名[] = {值1, 值2, ...};
				int main()	{
					// 1. 数据类型 数组名[ 数组长度 ];
					int arr[5];
					arr[0] = 10;
					arr[1] = 20;
					arr[2] = 30;
					arr[3] = 40;
					arr[4] = 50;
					
					cout << arr[0] << endl;		//反问数据元素
						
					//2. 数据类型 数组名[ 数组长度 ] = {值1, 值2, ...};			(如果给定值数目少于数组长度会用0填充)
					int arr2[5] = { 10, 20, 30, 40, 50 };
					for (int i = 0; i < 5; i++)
					{
						cout << arr2[i] << endl;
					}
					
					//3. 数据类型 数组名[] = {值1, 值2, ...};
					int arr3[] = { 10, 20, 30, 40, 50 };
					for (int i = 0; i < 5; i++)
					{
						cout << arr3[i] << endl;
					}
						
					system("pause");
					
					return 0;
				}
				
		2. 数组名
			用途
			a. 可以统计整个数组在内存中的长度		//sizeof(arr)
			b. 可以获取数组在内存中的首地址			//cout<< arr << endl;
				int main()	{
					// 1. 统计整个数组在内存中的长度;
					int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
					cout << "整个数组占用内存空间为：" << sizeof(arr) << endl;				//输出：40，（每个int数占4个字节）
					cout << "每个数组元素占用内存空间为：" << sizeof(arr[0]) << endl;		//输出：4
						
					//2. 获取数组在内存中的首地址;		
					cout << "数组首地址：" << arr << endl;									//输出16进制：004FFA68
					cout << "数组首地址：" << (int)arr << endl;								//输出10进制：19922412
					cout << "数组中第一个元素地址为：" << (int)&arr[0] << endl;				//输出10进制：19922412
					cout << "数组中第二个元素地址为：" << (int)&arr[1] << endl;				//输出10进制：19922416

					//注：数组名是个常量不可以进行复制操作
					
					system("pause");
					
					return 0;
				}


		3. 冒泡排序
			最常用的排序算法，对数组内元素进行排序
			a. 比较相邻的元素，如果第一个比第二个大，就交换他们两个。
			b. 对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。
			c. 重复以上的步骤，每次比较次数-1，直到不需要比较。
			
			
	2）、二维数组
		1. 定义方式
			四种定义方式
			a. 数组类型 数组名[行数][列数];
			b. 数组类型 数组名[行数][列数] = {{数据1, 数据2}, {数据3, 数据4}};
			c. 数组类型 数组名[行数][列数] = {数据1, 数据2, 数据3, 数据4};
			d. 数组类型 数组名[][列数] = {数据1, 数据2, 数据3, 数据4};
				int main()	{
					// 1. 数组类型 数组名[行数][列数];
					int arr[2][3];
					arr[0][0] = 1;
					arr[0][1] = 2;
					arr[0][2] = 3;
					arr[1][0] = 4;
					arr[1][1] = 5;
					arr[1][2] = 6;
						
					//2. 数组类型 数组名[行数][列数] = {{数据1, 数据2}, {数据3, 数据4}};
					int arr2[2][3] = { {1, 2, 3}, {4, 5, 6}};

					
					//3. 数组类型 数组名[行数][列数] = {数据1, 数据2, 数据3, 数据4};
					int arr3[2][3] = { 1, 2, 3, 4, 5, 6 };
					
					//4. 数组类型 数组名[][列数] = {数据1, 数据2, 数据3, 数据4};
					int arr4[][3] = { 1, 2, 3, 4, 5, 6 };
						
					system("pause");
					
					return 0;
				}


		2. 数组名
			用途
			a. 查看二维数组所占内存空间
			b. 获取二维数组首地址
				int main()	{
					// 1. 查看二维数组所占内存空间;
					int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
					cout << "整个数组占用内存空间为：" << sizeof(arr) << endl;						//输出：24，（每个int数占4个字节）
					cout << "第一行元素占用内存空间为：" << sizeof(arr[0]) << endl;					//输出：12
					cout << "第一个元素占用内存空间为：" << sizeof(arr[0][0]) << endl;				//输出：4
					
					cout << "二维数组行数为：" << sizeof(arr) / sizeof(arr[0]) << endl;				//输出：2
					cout << "二维数组列数为：" << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;		//输出：3
						
					//2. 获取二维数组在内存中的首地址;		
					cout << "数组首地址：" << arr << endl;											//输出16进制：004FFA68
					cout << "数组首地址：" << (int)arr << endl;										//输出10进制：16053988
					cout << "数组中第一行首地址为：" << (int)arr[0] << endl;						//输出10进制：16053988
					cout << "数组中第二行首地址为：" << (int)arr[1] << endl;						//输出10进制：16054000
					
					cout << "数组中第一个元素地址为：" << (int)&arr[0][0] << endl;					//输出10进制：16053988
					cout << "数组中第二个元素地址为：" << (int)&arr[0][1] << endl;					//输出10进制：16053992

					//注：数组名是个常量不可以进行复制操作
					
					system("pause");
					
					return 0;
				}


		3. 案例
			string names[3] = {"张三", "李四", "王五"}			//需要头文件 #include <string>

