三、运算符		
	1) 加减乘除运算符
		int a1 = 10;
		int b1 = 3;
		
		cout << a1 + b1 << endl;
		cout << a1 - b1 << endl;
		cout << a1 * b1 << endl;
		cout << a1 / b1 << endl;	//两个整数相除结果依然是整数，将小数部分去掉， 分母不能为零。
		
		double d1 = 0.5;
		double d2 = 0.22;
		cout << d1 /d2 << endl;	//两个小数相除，运算结果整除时为整数，其他为小数。
	
	
	2) 取模运算
		求余数
		
		int a1 = 10;
		int b1 = 3;
		
		cout << a1 % b1 << endl;	//结果为1， 两个小数不能取模运算。
	
	
	3) 递增递减运算
		1. 前置递增
			int a = 10;
			++a;	//让变量+1
			cout << "a = " << a << endl;	//结果：11
			
		2. 后置递增
			int b = 10;
			b++;	//让变量+1
			cout << "b = " << b << endl;	//结果：11
			
		3. 前置和后置的区别
			//前置递增 先让变量+1 然后进行表达式运算
			int a2 = 10;
			int b2 = ++a2 * 10;	//a2先加1得出a2，然后乘10得出a2，b2
			cout << "a2 = " << a2 << endl;	//结果：11
			cout << "b2 = " << b2 << endl;	//结果：110
	
			//后置递增 先进行表达式运算 然后让变量+1
			int a2 = 10;
			int b2 = a2++ * 10;	//a2先乘10得出b2，然后a2+1得出a2
			cout << "a2 = " << a2 << endl;	//结果：11
			cout << "b2 = " << b2 << endl;	//结果：100
	
	4) 赋值运算符
		1. =、+=、-=、*=、/=、%=
			int a = 10;
			a = 100;
			cout << "a = " << a << endl:
			
	5) 比较运算符
		//用于表达式的比较。并返回一个真值或假值,1 或 0
		// ==	!=	>	< 	>=	<=
		
	6) 逻辑运算符
		// !	&&	||	非	与	或
		1. ! 逻辑运算符 非，在C++中除了0都为真
			int main()	{
				int a = 10;
				cout << !a << endl;		//打印0
				cout << !!a << endl;	//打印1
				system("pause");
				return 0;
			}
		
		2. && 逻辑运算符 与
			int main()	{
				int a = 10;
				int b = 10;
				cout << (a && b) << endl;		//打印1
				int a = 0;
				int b = 10;
				cout << (a && b) << endl;		//打印0
				int a = 0;
				int b = 0;
				cout << (a && b) << endl;		//打印0
				system("pause");
				return 0;
			}
			
		3. || 逻辑运算符 或
			int main()	{
				int a = 10;
				int b = 10;
				cout << (a || b) << endl;		//打印1
				int a = 0;
				int b = 10;
				cout << (a || b) << endl;		//打印1
				int a = 0;
				int b = 0;
				cout << (a || b) << endl;		//打印0
				system("pause");
				return 0;
			}





二、其他相关资料
    C++ 运算符
    运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，并提供了以下类型的运算符：

    算术运算符
    关系运算符
    逻辑运算符
    位运算符
    赋值运算符
    杂项运算符
    本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。

    1. 算术运算符
        #include <iostream>
        using namespace std;

        运算符	描述	实例
        +	把两个操作数相加	A + B 将得到 30
        -	从第一个操作数中减去第二个操作数	A - B 将得到 -10
        *	把两个操作数相乘	A * B 将得到 200
        /	分子除以分母	B / A 将得到 2
        %	取模运算符，整除后的余数	B % A 将得到 0
        ++	自增运算符，整数值增加 1	A++ 将得到 11
        --	自减运算符，整数值减少 1	A-- 将得到 9


    2. 运算符	描述	实例
        ==	检查两个操作数的值是否相等，如果相等则条件为真。	(A == B) 不为真。
        !=	检查两个操作数的值是否相等，如果不相等则条件为真。	(A != B) 为真。
        >	检查左操作数的值是否大于右操作数的值，如果是则条件为真。	(A > B) 不为真。
        <	检查左操作数的值是否小于右操作数的值，如果是则条件为真。	(A < B) 为真。
        >=	检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(A >= B) 不为真。
        <=	检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(A <= B) 为真。


    3. 运算符	描述	实例
        &&	称为逻辑与运算符。如果两个操作数都 true，则条件为 true。	(A && B) 为 false。
        ||	称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。	(A || B) 为 true。
        !	称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。	!(A && B) 为 true。


    4. 运算符	描述	实例
        &   按位与操作，按二进制位进行"与"运算。运算规则：0&0=0; 0&1=0; 1&0=0; 1&1=1;	(A & B) 将得到 12，即为 0000 1100
        |   按位或运算符，按二进制位进行"或"运算。运算规则：0|0=0; 0|1=1; 1|0=1; 1|1=1;	(A | B) 将得到 61，即为 0011 1101
        ^   异或运算符，按二进制位进行"异或"运算。运算规则：0^0=0; 0^1=1; 1^0=1; 1^1=0;	(A ^ B) 将得到 49，即为 0011 0001 任何数异或都等于它本身
        ~   取反运算符，按二进制位进行"取反"运算。运算规则：~1=-2; ~0=-1;	(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。
        <<	二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。	A << 2 将得到 240，即为 1111 0000
        >>	二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。	A >> 2 将得到 15，即为 0000 1111


    5. 运算符	描述	实例
        =	简单的赋值运算符，把右边操作数的值赋给左边操作数	C = A + B 将把 A + B 的值赋给 C
        +=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	C += A 相当于 C = C + A
        -=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	C -= A 相当于 C = C - A
        *=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	C *= A 相当于 C = C * A
        /=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	C /= A 相当于 C = C / A
        %=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	C %= A 相当于 C = C % A
        <<=	左移且赋值运算符	C <<= 2 等同于 C = C << 2
        >>=	右移且赋值运算符	C >>= 2 等同于 C = C >> 2
        &=	按位与且赋值运算符	C &= 2 等同于 C = C & 2
        ^=	按位异或且赋值运算符	C ^= 2 等同于 C = C ^ 2
        |=	按位或且赋值运算符	C |= 2 等同于 C = C | 2


    6. 运算符	                描述
        sizeof	                sizeof 运算符返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。
        Condition ? X : Y	    条件运算符。如果 Condition 为真 ? 则值为 X : 否则值为 Y。
        ,	                    逗号运算符会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。
        .（点）和 ->（箭头）	    成员运算符用于引用类、结构和共用体的成员。
        Cast	                强制转换运算符把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。
        &	                    指针运算符 & 返回变量的地址。例如 &a; 将给出变量的实际地址。
        *	                    指针运算符 * 指向一个变量。例如，*var; 将指向变量 var。

    7. C++ 中的运算符优先级
        运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。

        例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。

        下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。

            类别 	运算符 	                            结合性
            后缀 	() [] -> . ++ - -  	                从左到右
            一元 	+ - ! ~ ++ - - (type)* & sizeof 	从右到左
            乘除 	* / % 	                            从左到右
            加减 	+ - 	                            从左到右
            移位 	<< >> 	                            从左到右
            关系 	< <= > >= 	                        从左到右
            相等 	== != 	                            从左到右
            位与    AND & 	                            从左到右
            位异或  XOR ^ 	                            从左到右
            位或    OR  | 	                            从左到右
            逻辑与  AND && 	                            从左到右
            逻辑或  OR  || 	                            从左到右
            条件 	?: 	                                从右到左
            赋值 	= += -= *= /= %=>>= <<= &= ^= |= 	从右到左
            逗号 	, 	                                从左到右

        对比有括号和没有括号时的区别，这将产生不同的结果。因为 ()、 /、 * 和 + 有不同的优先级，高优先级的操作符将优先计算。

