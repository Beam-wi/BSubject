六、函数
	1）、概述
		笔记：当函数调用结束后，函数产生的临时值会消失（既执行完后内存自动释放）
	2）、函数的定义
		函数的定义一般主要有5个步骤：
		a. 返回值类型
		b. 函数名
		c. 函数表列
		d. 函数体语句
		e. return表达式
		语法：
			返回值类型 函数名 （参数列表）
			{
				函数体语句
				
				return表达式
			}
	
		例子：
		//实现一个加法函数，功能是传入两个整型数据， 计算数据相加的结果并返回。
		int add(int num1, int num2)
		{
			int sum = num1 + num2;
			return sum;
		
		}
		
	3）、函数的调用
		// 定义调用的函数, 函数定义是，参数并没有真是数据，他只是一个形式上的参数，简称形参。
		int add(int num1, int num2)
		{
			int sum = num1 + num2;
			return sum;
		
		}
		
		//定义主函数
		int main(){
			//调用add函数，
			int a = 10;
			int b = 20;
			// a和b称为实际参数，简称实参， 当调用时实参的值会传递给形参做计算。
			int c = add(a, b);
			cout << "c = " << c << endl;
			
			a = 100;
			b = 500;
			c = add(a, b);
			cout << "c = " << c << endl;
			
			system("pause");
			
			return 0;
		}
		
		
	4）、值传递
		//定义函数，实现两个数字进行交换函数
		//如果函数不需要返回值，声明的时候可以写void（无类型）
		void swap(int num1, int num2)
		{
			cout << "交换前：" << endl;
			cout << "num1 = " << num1 << endl;
			cout << "num2 = " << num2 << endl;
			int temp = num1;
			num1 = num2
			num2 = temp
			cout << "交换后：" << endl;
			cout << "num1 = " << num1 << endl;
			cout << "num2 = " << num2 << endl;
			
			return; 	//返回值不需要时，可以不写return，既这行可以注释掉。
		}
		
		
		int main(){
			//调用add函数，
			int a = 10;
			int b = 20;
			cout << "a = " << a << endl;
			cout << "b = " << b << endl;
			//形参值交换，实参不发生改变。
			swap(a, b);
			cout << "a = " << a << endl;
			cout << "b = " << b << endl;
			
			system("pause");
			
			return 0;
		}

	5）、函数的常见形式		void 定义无数据类型
		常见形式有4种
		1. 无参无返
		2. 有参无返
		3. 无参有返
		4. 有参有返

	6）、函数的声明
		作用：告诉编译器函数名称及如何调用函数，函数的实际主体可以单独定义。
		注：函数的声明可以多次，但是函数的定义只能有一次。

		例子：
		//函数的声明, 当函数定义在 主程序之后时可以通过函数声明来告诉编译器函数存在
		//比较函数，实现两个整形数字进行比较，返回较大的值
		
		int max(int a, int b);				//先声明
		
		int main(){					
			int a = 10;
			int b = 20;
			
			cout << max(a, b) << endl;		//调用
			
			system("pause");
			
			return 0;
		}
		
		int max(int a, int b)				//定义
		{
			return a > b ? a : b;
		}

	7）、函数的分文件编写
		作用：让代码结构更加清晰，（多个文件调用）
		函数分文件编写一般有4个步骤
		1. 创建后缀名为 .h 的头文件
		2. 创建后缀名为 .cpp 的源文件
		3. 在头文件中写函数的声明
		4. 在源文件中写函数的定义
		
			a.	头文件
				写法一：
					//swap.h
					#include <iostream>
					using namespace std;		//c++框架
					
					//函数的声明
					void swap(int a, int b);
					
				写法二：
					//swap.h
					#ifndef __HELLO_H__
					#define __HELLO_H__
					
					#include <stdio.h>
					
					//函数的声明
					void swap(int a, int b);
					
					#endif
				
			
			b.	函数定义源文件
				//swap.cpp
				#include "swap.h"			//双引号待标声明自定义头文件
				
				//函数的定义, 注意：该定义函数中用到的字符要在头文件中引入
				void swap(int a, int b)
				{
					int temp = a;
					a = b;
					b = temp;
					
					cout << "a = " << a << endl;
					cout << "b = " << b << endl;
				}
			
			c.	函数调用源文件两种写法 对应两种编译方式
				方法一：引入自定义函数（头文件法）
					编辑：//test.cpp
						#include <iostream>
						using namespace std;
						#include "swap.h"			方法二：直接导入源文件名称不需要头文件  #include "swap.cpp"
						
						...
					
					编译：
						g++ -o main test.cpp swap.cpp		//test是要编译的主程序脚本，里面必须有main程序，swap.cpp是库函数需要指定 不然会报错未定义


				方法二：直接导入源文件名称不需要头文件
					编辑：//test.cpp
						#include <iostream>
						using namespace std;
						#include "swap.cpp"			
						
						...
					
					编译：
						g++ -o main test.cpp 				//test是要编译的主程序脚本，里面必须有main程序，swap.cpp是库函数这种方式不需要指定
															//另外这里test.cpp也可以换成test.cpp编译成的静态库
															
															
		总结：头文件就好比一个桥梁，构建两个文件之间函数互相调用的关系



















